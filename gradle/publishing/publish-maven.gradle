apply plugin: 'maven-publish'

//publishing {
//    publications {
//        modulesJar(MavenPublication) {
//            from components.java
//            artifactId project.name
//            artifact sourcesJar
//            artifact javadocJar
//        }
//    }
//}

publishing.publications.all {
    pom.withXml {
        def root = asNode()
//        root.appendNode('name', 'PowerMock')
//        root.appendNode('packaging', 'jar')
//        root.appendNode('description', project.description)
//        root.appendNode('url', 'http://www.powermock.org')

//        def license = root.appendNode('licenses').appendNode('license')
//        license.appendNode('name', 'The Apache Software License, Version 2.0')
//        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
//        license.appendNode('distribution', 'repo')
//
//        def scm = root.appendNode('scm')
//        scm.appendNode('url', 'http://github.com/mockito/mockito')
//        scm.appendNode('connection', 'scm:git:git://github.com/powermock/powermock')
//        scm.appendNode('developerConnection', 'scm:git:git://github.com/powermock/powermock')

//        def issues = root.appendNode('issueManagement')
//        issues.appendNode('url', 'https://github.com/powermock/powermock/issues')
//        issues.appendNode('system', 'GitHub')

        root.dependencies.'*'.findAll() {
            it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                dep.name == it.artifactId.text()
            }
        }.each() {
            it.scope*.value = 'compile'
        }

        def depends
        if (root.dependencies.size() > 0) {
            depends = root.dependencies.get(0)
        }else{
            depends = root.appendNode('dependencies')
        }

        if (project.configurations.hasProperty('provided')) {
            project.configurations.provided.allDependencies.each {
                def dep = depends.appendNode('dependency')
                dep.appendNode('groupId', it.group)
                dep.appendNode('artifactId', it.name)
                dep.appendNode('version', it.version)
                dep.appendNode('scope', 'provided')
            }
        }

        if (project.configurations.hasProperty('mockito2')){
            project.configurations.mockito2.allDependencies.each {
                def dep = depends.appendNode('dependency')
                dep.appendNode('groupId', it.group)
                dep.appendNode('artifactId', it.name)
                dep.appendNode('version', it.version)
                dep.appendNode('scope', 'compile')
            }
        }

    }
}


